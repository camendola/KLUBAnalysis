[general]
lumi = 35867 # pb^-1

#outputFolder = ./analysis_ETau_VBF8Jun2018_efficiency
outputFolder = ./analysis_ETau_VBF18Jun2018_combine_1jetCat
#outputFolder = ./analysis_ETau_VBF18Jun2018_combine_newOrder_VBFscan
#outputFolder = ./analysis_ETau_VBF18Jun2018_combine_newOrder_sboost_noVBFscan
#outputFolder = ./analysis_ETau_VBF18Jun2018_combine_newOrder_s2b0j_noVBFscan
#outputFolder = ./analysis_ETau_VBF18Jun2018_combine_newOrder_s1b1j_noVBFscan
#outputFolder = ./analysis_ETau_VBF22May2018_combine_newOrder_VBFlmr70scan
outputFolder = ./analysis_ETau_BDT18Jul2018
data        = DsingleEle
signals = VBFC2V1XS, ggHHXS
backgrounds = TTfullyHad, TTfullyLep, TTsemiLep, WplusToLNuWminusTo2JJJ_QCD, WplusTo2JWminusToLNuJJ_QCD, WplusToLNuWplusTo2JJJ_QCD ,WminusToLNuWminusTo2JJJ_QCD,WplusToLNuZTo2JJJ_QCD,WplusTo2JZTo2LJJ_QCD,WminusToLNuZTo2JJJ_QCD,WminusTo2JZTo2LJJ_QCD, ZTo2LZTo2JJJ_QCD, DY,WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf, TWtop, TWantitop,singleTop_top,singleTop_antitop


#variables = HH_deltaR, tauH_pt, bH_pt, HH_mass, HH_pt, dib_deltaR, VBFjj_mass, VBFjj_deltaEta, VBFjj_HT, VBFjet1_pt, VBFjet1_eta, VBFjet2_pt, VBFjet2_eta,jj_mass, jj_deltaEta, jj_HT, bjet1_bID, bjet2_bID, VBFjet2_btag, VBFjet1_btag,dau1_z, bjet1_z, bjet2_z, HH_z, HH_zV, HH_A, jet5_z, jet5_pt, jet5_eta,dau1_iso,dau2_iso, met_et_corr,met_et, jet3_pt,jet3_eta, jet4_pt,jet4_eta, tauH_mass, bH_mass, dib_deltaPhi, ditau_deltaPhi, ditau_deltaEta, dib_deltaEta
#variables2D = tauH_SVFIT_mass:bH_mass_raw
#variables  = VBFjj_mass, jj_mass



#selections = baselineVBF_T_btagMfirst, baselineVBF, baselineVBF_T_btagMfirstMcut, baselineVBFMcut

#variables = MT2, MT2_tauup, MT2_taudown, MT2_jetup, MT2_jetdown,  HH_mass


#selections = sboostedLLMcut, s1b1jresolvedMcutlmr70, s2b0jresolvedMcutlmr70
#selections = sboostedLLMcut, s1b1jresolvedMcutlmr70, s2b0jresolvedMcutlmr70, sboostedLLMcut_nojet30, s1b1jresolvedMcut_nojet30, s2b0jresolvedMcut_nojet30,sboostedLLMcut_nojet40, s1b1jresolvedMcut_nojet40, s2b0jresolvedMcut_nojet40, sboostedLLMcut_nojet50, s1b1jresolvedMcut_nojet50, s2b0jresolvedMcut_nojet50, baselinejet301b, baselinejet401b, baselinejet501b

#selections = VBFm300eta2, VBFm400eta2,VBFm500eta2,VBFm600eta2, VBFm650eta2,VBFm700eta2,VBFm750eta2,VBFm800eta2,VBFm900eta2,VBFm1000eta2, VBFm1500eta2, VBFm2000eta2,VBFm300eta3, VBFm400eta3,VBFm500eta3,VBFm600eta3, VBFm650eta3,VBFm700eta3,VBFm750eta3,VBFm800eta3,VBFm900eta3,VBFm1000eta3, VBFm1500eta3, VBFm2000eta3,VBFm300eta4, VBFm400eta4,VBFm500eta4,VBFm600eta4, VBFm650eta4,VBFm700eta4,VBFm750eta4,VBFm800eta4,VBFm900eta4,VBFm1000eta4, VBFm1500eta4, VBFm2000eta4

#selections = sboostedLL_noVBFm300eta2, sboostedLL_noVBFm400eta2,sboostedLL_noVBFm500eta2,sboostedLL_noVBFm600eta2, sboostedLL_noVBFm650eta2,sboostedLL_noVBFm700eta2,sboostedLL_noVBFm750eta2,sboostedLL_noVBFm800eta2,sboostedLL_noVBFm900eta2,sboostedLL_noVBFm1000eta2, sboostedLL_noVBFm1500eta2, sboostedLL_noVBFm2000eta2, sboostedLL_noVBFm300eta3, sboostedLL_noVBFm400eta3,sboostedLL_noVBFm500eta3,sboostedLL_noVBFm600eta3, sboostedLL_noVBFm650eta3,sboostedLL_noVBFm700eta3,sboostedLL_noVBFm750eta3,sboostedLL_noVBFm800eta3,sboostedLL_noVBFm900eta3,sboostedLL_noVBFm1000eta3, sboostedLL_noVBFm1500eta3, sboostedLL_noVBFm2000eta3,sboostedLL_noVBFm300eta4, sboostedLL_noVBFm400eta4,sboostedLL_noVBFm500eta4,sboostedLL_noVBFm600eta4, sboostedLL_noVBFm650eta4,sboostedLL_noVBFm700eta4,sboostedLL_noVBFm750eta4,sboostedLL_noVBFm800eta4,sboostedLL_noVBFm900eta4,sboostedLL_noVBFm1000eta4, sboostedLL_noVBFm1500eta4, sboostedLL_noVBFm2000eta4

#selections = s1b1jresolvedMcut_noVBFm300eta2, s1b1jresolvedMcut_noVBFm400eta2,s1b1jresolvedMcut_noVBFm500eta2,s1b1jresolvedMcut_noVBFm600eta2, s1b1jresolvedMcut_noVBFm650eta2,s1b1jresolvedMcut_noVBFm700eta2,s1b1jresolvedMcut_noVBFm750eta2,s1b1jresolvedMcut_noVBFm800eta2,s1b1jresolvedMcut_noVBFm900eta2,s1b1jresolvedMcut_noVBFm1000eta2, s1b1jresolvedMcut_noVBFm1500eta2, s1b1jresolvedMcut_noVBFm2000eta2, s1b1jresolvedMcut_noVBFm300eta3, s1b1jresolvedMcut_noVBFm400eta3,s1b1jresolvedMcut_noVBFm500eta3,s1b1jresolvedMcut_noVBFm600eta3, s1b1jresolvedMcut_noVBFm650eta3,s1b1jresolvedMcut_noVBFm700eta3,s1b1jresolvedMcut_noVBFm750eta3,s1b1jresolvedMcut_noVBFm800eta3,s1b1jresolvedMcut_noVBFm900eta3,s1b1jresolvedMcut_noVBFm1000eta3, s1b1jresolvedMcut_noVBFm1500eta3, s1b1jresolvedMcut_noVBFm2000eta3,s1b1jresolvedMcut_noVBFm300eta4, s1b1jresolvedMcut_noVBFm400eta4,s1b1jresolvedMcut_noVBFm500eta4,s1b1jresolvedMcut_noVBFm600eta4, s1b1jresolvedMcut_noVBFm650eta4,s1b1jresolvedMcut_noVBFm700eta4,s1b1jresolvedMcut_noVBFm750eta4,s1b1jresolvedMcut_noVBFm800eta4,s1b1jresolvedMcut_noVBFm900eta4,s1b1jresolvedMcut_noVBFm1000eta4, s1b1jresolvedMcut_noVBFm1500eta4, s1b1jresolvedMcut_noVBFm2000eta4

#selections = s2b0jresolvedMcut_noVBFm300eta2, s2b0jresolvedMcut_noVBFm400eta2,s2b0jresolvedMcut_noVBFm500eta2,s2b0jresolvedMcut_noVBFm600eta2, s2b0jresolvedMcut_noVBFm650eta2,s2b0jresolvedMcut_noVBFm700eta2,s2b0jresolvedMcut_noVBFm750eta2,s2b0jresolvedMcut_noVBFm800eta2,s2b0jresolvedMcut_noVBFm900eta2,s2b0jresolvedMcut_noVBFm1000eta2, s2b0jresolvedMcut_noVBFm1500eta2, s2b0jresolvedMcut_noVBFm2000eta2, s2b0jresolvedMcut_noVBFm300eta3, s2b0jresolvedMcut_noVBFm400eta3,s2b0jresolvedMcut_noVBFm500eta3,s2b0jresolvedMcut_noVBFm600eta3, s2b0jresolvedMcut_noVBFm650eta3,s2b0jresolvedMcut_noVBFm700eta3,s2b0jresolvedMcut_noVBFm750eta3,s2b0jresolvedMcut_noVBFm800eta3,s2b0jresolvedMcut_noVBFm900eta3,s2b0jresolvedMcut_noVBFm1000eta3, s2b0jresolvedMcut_noVBFm1500eta3, s2b0jresolvedMcut_noVBFm2000eta3,s2b0jresolvedMcut_noVBFm300eta4, s2b0jresolvedMcut_noVBFm400eta4,s2b0jresolvedMcut_noVBFm500eta4,s2b0jresolvedMcut_noVBFm600eta4, s2b0jresolvedMcut_noVBFm650eta4,s2b0jresolvedMcut_noVBFm700eta4,s2b0jresolvedMcut_noVBFm750eta4,s2b0jresolvedMcut_noVBFm800eta4,s2b0jresolvedMcut_noVBFm900eta4,s2b0jresolvedMcut_noVBFm1000eta4, s2b0jresolvedMcut_noVBFm1500eta4, s2b0jresolvedMcut_noVBFm2000eta4

#signals = VBFC2V1XS, ggHHXS 

#selections = baseline, baselineVBF, baselineVBF_1b1j, baselineVBF_massVBF300, baselineVBF_massVBF700, baselineVBF_deltaEtaVBF3, baselineVBF_deltaEtaVBF4, baselineVBF_deltaEtaVBF3_1b1j, baselineVBF_deltaEtaVBF4_1b1j , baselineVBF_massVBF300_deltaEtaVBF3, baselineVBF_massVBF700_deltaEtaVBF3,baselineVBF_massVBF700_deltaEtaVBF4, VBFm300eta3, VBFm700eta3, VBFm700eta4

#variables  = VBFjj_mass, VBFjj_deltaEta, HH_mass
#variables2D =  VBFjj_deltaEta:VBFjj_mass

#### for BDT scan in VBF region
variables  = BDToutVBF, HH_mass, VBFjj_mass, VBFjj_deltaEta
variables2D =  VBFjj_mass:VBFjj_deltaEta

selections = BDT_VBF_m1, BDT_VBF_m08, BDT_VBF_m06, BDT_VBF_m04, BDT_VBF_m02, BDT_VBF_1, BDT_VBF_p02, BDT_VBF_p04, BDT_VBF_p06, BDT_VBF_p08, BDT_VBF_p1, VBFm700eta3, VBFm700eta4

regions    = SR, SStight, SSrlx, OSinviso, SSinviso

[configs]
sampleCfg = config/sampleCfg_newOrder.cfg
cutCfg    = config/selectionCfg_VBF_ETau.cfg

[merge]
TT       = TTfullyHad, TTfullyLep, TTsemiLep
VVJJ     =  WplusToLNuWminusTo2JJJ_QCD,WplusTo2JWminusToLNuJJ_QCD,WplusToLNuWplusTo2JJJ_QCD,WminusToLNuWminusTo2JJJ_QCD,WplusToLNuZTo2JJJ_QCD,WplusTo2JZTo2LJJ_QCD,WminusToLNuZTo2JJJ_QCD,WminusTo2JZTo2LJJ_QCD, ZTo2LZTo2JJJ_QCD
WJets    = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
singleT       = singleTop_top, singleTop_antitop, TWtop, TWantitop
data_obs = DsingleEle

############################################################################################
############################################################################################
# the following lines are used for postprocessing (pp_), i.e. not read from AnalysisHelper
# but used in subsequent steps of the analysis to combine histos, compute QCD etc..
# we keep them here to have everything at hand

#[pp_merge]
# TT    = TTfullyHad, TTfullyLep, TTsemiLep
# WJets = WJets0jet, WJets1jet, WJets2jet, WJets3jet, WJets4jet

## in case some histos must be rebinned. Pass as
## uniqueid = varToRebin , condition, newBinning
#[pp_rebin]
#r1 = HHKin_mass_raw         , sboostedLLMcut , 250, 500, 600, 700, 850, 1000 # as for ICHEP (then can not draw last low bin)
#r2 = HHKin_mass_raw_tauup   , sboostedLLMcut , 250, 500, 600, 700, 850, 1000 # as for ICHEP (then can not draw last low bin)
#r3 = HHKin_mass_raw_taudown , sboostedLLMcut , 250, 500, 600, 700, 850, 1000 # as for ICHEP (then can not draw last low bin)
#r4 = HHKin_mass_raw_jetup   , sboostedLLMcut , 250, 500, 600, 700, 850, 1000 # as for ICHEP (then can not draw last low bin)
#r5 = HHKin_mass_raw_jetdown , sboostedLLMcut , 250, 500, 600, 700, 850, 1000 # as for ICHEP (then can not draw last low bin)
#
#r6  = MT2         , sboostedLLMcut , 0, 150, 200, 250, 300, 500 # some bins bins - the lowest one has small signal
#r7  = MT2_tauup   , sboostedLLMcut , 0, 150, 200, 250, 300, 500 # some bins bins - the lowest one has small signal
#r8  = MT2_taudown , sboostedLLMcut , 0, 150, 200, 250, 300, 500 # some bins bins - the lowest one has small signal
#r9  = MT2_jetup   , sboostedLLMcut , 0, 150, 200, 250, 300, 500 # some bins bins - the lowest one has small signal
#r10 = MT2_jetdown , sboostedLLMcut , 0, 150, 200, 250, 300, 500 # some bins bins - the lowest one has small signal
#
#r11 = HHKin_mass_raw         , s2b0jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r12 = HHKin_mass_raw_tauup   , s2b0jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r13 = HHKin_mass_raw_taudown , s2b0jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r14 = HHKin_mass_raw_jetup   , s2b0jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r15 = HHKin_mass_raw_jetdown , s2b0jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#
#r16 = HHKin_mass_raw         , s1b1jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r17 = HHKin_mass_raw_tauup   , s1b1jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r18 = HHKin_mass_raw_taudown , s1b1jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r19 = HHKin_mass_raw_jetup   , s1b1jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#r20 = HHKin_mass_raw_jetdown , s1b1jresolvedMcutlmr90, 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 500, 700, 1000
#
#
### parameters for QCD evaluation
### doFitIf : condition to be respected to make rlx-to-tight QCD fit. It is used as eval(doFitIf). Use names sel, var
#
[pp_QCD]
QCDname      = QCD
SR           = SR
yieldSB      = SStight
shapeSB      = SSrlx
SBtoSRfactor = 1.2
# doFitIf      = var == 'MT2' or var == 'HHKin_mass_raw'
doFitIf      = False
fitFunc      = [0] + [1]*x