
# the definition of composed selections. Can contain as well TCut style selections, e.g.:
# resolved = baseline, btagMM, massCut
# resolvedHighPt = baseline, btagMM, massCut, dau1_pt > 150
# use comma separated lists
[selections]

### some selections with tes up/down
### note: jets are selected at skim level to have pt > 20
### so I am raising the pt value to 25 just to test the change in the acceptance
baseline_nominal     = pairType == 1 && dau1_pt > 27 && abs(dau1_eta) < 2.1 && dau2_pt > 20         && abs(dau2_eta) < 2.3 && nleps == 0 && bjet1_pt_raw > 25         && bjet2_pt_raw > 25
baseline_tesUp       = pairType == 1 && dau1_pt > 27 && abs(dau1_eta) < 2.1 && dau2_pt_tauup > 20   && abs(dau2_eta) < 2.3 && nleps == 0 && bjet1_pt_raw > 25         && bjet2_pt_raw > 25
baseline_tesDown     = pairType == 1 && dau1_pt > 27 && abs(dau1_eta) < 2.1 && dau2_pt_taudown > 20 && abs(dau2_eta) < 2.3 && nleps == 0 && bjet1_pt_raw > 25         && bjet2_pt_raw > 25
baseline_jesUp       = pairType == 1 && dau1_pt > 27 && abs(dau1_eta) < 2.1 && dau2_pt > 20         && abs(dau2_eta) < 2.3 && nleps == 0 && bjet1_pt_raw_jetup > 25   && bjet2_pt_raw_jetup > 25
baseline_jesDown     = pairType == 1 && dau1_pt > 27 && abs(dau1_eta) < 2.1 && dau2_pt > 20         && abs(dau2_eta) < 2.3 && nleps == 0 && bjet1_pt_raw_jetdown > 25 && bjet2_pt_raw_jetdown > 25
ellypsMassCut_tesUp    = ((tauH_SVFIT_mass_up-116.)*(tauH_SVFIT_mass_up-116.))/(35.*35.) + ((bH_mass_raw-111.)*(bH_mass_raw-111.))/(45.*45.) <  1.0
ellypsMassCut_tesDown  = ((tauH_SVFIT_mass_down-116.)*(tauH_SVFIT_mass_down-116.))/(35.*35.) + ((bH_mass_raw-111.)*(bH_mass_raw-111.))/(45.*45.) <  1.0
ellypsMassCut_jesUp    = ((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.))/(35.*35.) + ((bH_mass_raw_jetup-111.)*(bH_mass_raw_jetup-111.))/(45.*45.) <  1.0
ellypsMassCut_jesDown  = ((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.))/(35.*35.) + ((bH_mass_raw_jetdown-111.)*(bH_mass_raw_jetdown-111.))/(45.*45.) <  1.0


s1b1jresolvedMcutlmr70_nominal = baseline_nominal , btagM,  isBoosted != 1 , ellypsMassCut, lmrBDTCut70rej
s2b0jresolvedMcutlmr70_nominal = baseline_nominal , btagMM, isBoosted != 1 , ellypsMassCut, lmrBDTCut70rej
s1b1jresolvedMcutlmr90_nominal = baseline_nominal , btagM,  isBoosted != 1 , ellypsMassCut, lmrBDTCut90rej
s2b0jresolvedMcutlmr90_nominal = baseline_nominal , btagMM, isBoosted != 1 , ellypsMassCut, lmrBDTCut90rej
s1b1jresolvedMcuthmr90_nominal = baseline_nominal , btagM,  isBoosted != 1 , ellypsMassCut, hmrBDTCut90rej
s2b0jresolvedMcuthmr90_nominal = baseline_nominal , btagMM, isBoosted != 1 , ellypsMassCut, hmrBDTCut90rej
sboostedLLMcut_nominal         = baseline_nominal , btagLL, isBoosted == 1 , boostMassCut

s1b1jresolvedMcutlmr70_tesUp = baseline_tesUp , btagM,  isBoosted != 1 , ellypsMassCut_tesUp, lmrBDTCut70rej
s2b0jresolvedMcutlmr70_tesUp = baseline_tesUp , btagMM, isBoosted != 1 , ellypsMassCut_tesUp, lmrBDTCut70rej
s1b1jresolvedMcutlmr90_tesUp = baseline_tesUp , btagM,  isBoosted != 1 , ellypsMassCut_tesUp, lmrBDTCut90rej
s2b0jresolvedMcutlmr90_tesUp = baseline_tesUp , btagMM, isBoosted != 1 , ellypsMassCut_tesUp, lmrBDTCut90rej
s1b1jresolvedMcuthmr90_tesUp = baseline_tesUp , btagM,  isBoosted != 1 , ellypsMassCut_tesUp, hmrBDTCut90rej
s2b0jresolvedMcuthmr90_tesUp = baseline_tesUp , btagMM, isBoosted != 1 , ellypsMassCut_tesUp, hmrBDTCut90rej
sboostedLLMcut_tesUp         = baseline_tesUp , btagLL, isBoosted == 1 , boostMassCut

s1b1jresolvedMcutlmr70_tesDown = baseline_tesDown , btagM,  isBoosted != 1 , ellypsMassCut_tesDown, lmrBDTCut70rej
s2b0jresolvedMcutlmr70_tesDown = baseline_tesDown , btagMM, isBoosted != 1 , ellypsMassCut_tesDown, lmrBDTCut70rej
s1b1jresolvedMcutlmr90_tesDown = baseline_tesDown , btagM,  isBoosted != 1 , ellypsMassCut_tesDown, lmrBDTCut90rej
s2b0jresolvedMcutlmr90_tesDown = baseline_tesDown , btagMM, isBoosted != 1 , ellypsMassCut_tesDown, lmrBDTCut90rej
s1b1jresolvedMcuthmr90_tesDown = baseline_tesDown , btagM,  isBoosted != 1 , ellypsMassCut_tesDown, hmrBDTCut90rej
s2b0jresolvedMcuthmr90_tesDown = baseline_tesDown , btagMM, isBoosted != 1 , ellypsMassCut_tesDown, hmrBDTCut90rej
sboostedLLMcut_tesDown         = baseline_tesDown , btagLL, isBoosted == 1 , boostMassCut

s1b1jresolvedMcutlmr70_jesUp = baseline_jesUp , btagM,  isBoosted != 1 , ellypsMassCut_jesUp, lmrBDTCut70rej
s2b0jresolvedMcutlmr70_jesUp = baseline_jesUp , btagMM, isBoosted != 1 , ellypsMassCut_jesUp, lmrBDTCut70rej
s1b1jresolvedMcutlmr90_jesUp = baseline_jesUp , btagM,  isBoosted != 1 , ellypsMassCut_jesUp, lmrBDTCut90rej
s2b0jresolvedMcutlmr90_jesUp = baseline_jesUp , btagMM, isBoosted != 1 , ellypsMassCut_jesUp, lmrBDTCut90rej
s1b1jresolvedMcuthmr90_jesUp = baseline_jesUp , btagM,  isBoosted != 1 , ellypsMassCut_jesUp, hmrBDTCut90rej
s2b0jresolvedMcuthmr90_jesUp = baseline_jesUp , btagMM, isBoosted != 1 , ellypsMassCut_jesUp, hmrBDTCut90rej
sboostedLLMcut_jesUp         = baseline_jesUp , btagLL, isBoosted == 1 , boostMassCut


s1b1jresolvedMcutlmr70_jesDown = baseline_jesDown , btagM,  isBoosted != 1 , ellypsMassCut_jesDown, lmrBDTCut70rej
s2b0jresolvedMcutlmr70_jesDown = baseline_jesDown , btagMM, isBoosted != 1 , ellypsMassCut_jesDown, lmrBDTCut70rej
s1b1jresolvedMcutlmr90_jesDown = baseline_jesDown , btagM,  isBoosted != 1 , ellypsMassCut_jesDown, lmrBDTCut90rej
s2b0jresolvedMcutlmr90_jesDown = baseline_jesDown , btagMM, isBoosted != 1 , ellypsMassCut_jesDown, lmrBDTCut90rej
s1b1jresolvedMcuthmr90_jesDown = baseline_jesDown , btagM,  isBoosted != 1 , ellypsMassCut_jesDown, hmrBDTCut90rej
s2b0jresolvedMcuthmr90_jesDown = baseline_jesDown , btagMM, isBoosted != 1 , ellypsMassCut_jesDown, hmrBDTCut90rej
sboostedLLMcut_jesDown         = baseline_jesDown , btagLL, isBoosted == 1 , boostMassCut

####################################################


baseline     = pairType == 1 && dau1_pt > 27 && abs(dau1_eta) < 2.1 && dau2_pt > 20 && abs(dau2_eta) < 2.3 && nleps == 0
VBF = VBFjet1_pt > 30 && VBFjet2_pt > 30
baselineVBF = baseline, VBF


#baselineVBF  = baseline, jet3_pt > 30 && jet4_pt > 30
btagL        = bjet1_bID > 0.5426 && bjet2_bID < 0.5426
btagM        = bjet1_bID > 0.8484 && bjet2_bID < 0.8484   
btagLL       = bjet1_bID > 0.5426 && bjet2_bID > 0.5426
btagMM       = bjet1_bID > 0.8484 && bjet2_bID > 0.8484
btagMfirst    = bjet1_bID > 0.8484
bVetoMM      = VBFjet1_btag < 0.8484 && VBFjet2_btag < 0.8484 

s1b1jresolved = baseline , btagM, isBoosted != 1
s2b0jresolved = baseline , btagMM, isBoosted != 1
sboostedLL    = baseline , btagLL, isBoosted == 1
sboostedMM    = baseline , btagMM, isBoosted == 1

baselineVBF_btagM  = baselineVBF, btagM
baselineVBF_btagM_bVetoMM = baselineVBF, btagM, bVetoMM

massVBF_L = VBFjj_mass > 300
massVBF_T = VBFjj_mass > 700
deltaEtaVBF_L = VBFjj_deltaEta>2.0

baselineVBF_L = baselineVBF, massVBF_L, deltaEtaVBF_L
baselineVBF_L_btagMfirst = baselineVBF_L, btagMfirst

baselineVBF_btagMfirst = baselineVBF, btagMfirst

baselineVBF_T = baselineVBF, massVBF_T, deltaEtaVBF_L
baselineVBF_T_btagMfirst = baselineVBF_T, btagMfirst

noVBFT = !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.0)
baseline_noVBFT = baseline, noVBFT
baseline_noVBFT_btagMfirst = baseline_noVBFT, btagMfirst

baseline_noVBFT_s1b1jresolved = noVBFT, s1b1jresolved
baseline_noVBFT_s2b0jresolved = noVBFT, s2b0jresolved
baseline_noVBFT_sboostedLL = noVBFT, sboostedLL


#final categories for VBF
###
#final categories for VBF
###
#for VBF limit scan
massVBF300 = VBFjj_mass > 300
massVBF350 = VBFjj_mass > 350
massVBF400 = VBFjj_mass > 400
massVBF450 = VBFjj_mass > 450
massVBF500 = VBFjj_mass > 500
massVBF550 = VBFjj_mass > 550
massVBF600 = VBFjj_mass > 600
massVBF650 = VBFjj_mass > 650
massVBF700 = VBFjj_mass > 700
massVBF750 = VBFjj_mass > 750
massVBF800 = VBFjj_mass > 800
massVBF900 = VBFjj_mass > 900
massVBF1000 = VBFjj_mass > 1000

deltaEtaVBF2 = VBFjj_deltaEta>2.0
deltaEtaVBF2p5 = VBFjj_deltaEta>2.5
deltaEtaVBF3 = VBFjj_deltaEta>3
VBF1b1j = btagMfirst, baselineVBF

VBFm300eta2 = VBF1b1j, massVBF300, deltaEtaVBF2
VBFm350eta2 = VBF1b1j, massVBF350, deltaEtaVBF2
VBFm400eta2 = VBF1b1j, massVBF400, deltaEtaVBF2
VBFm450eta2 = VBF1b1j, massVBF450, deltaEtaVBF2
VBFm500eta2 = VBF1b1j, massVBF500, deltaEtaVBF2
VBFm550eta2 = VBF1b1j, massVBF550, deltaEtaVBF2
VBFm600eta2 = VBF1b1j, massVBF600, deltaEtaVBF2
VBFm650eta2 = VBF1b1j, massVBF650, deltaEtaVBF2
VBFm700eta2 = VBF1b1j, massVBF700, deltaEtaVBF2
VBFm750eta2 = VBF1b1j, massVBF750, deltaEtaVBF2
VBFm800eta2 = VBF1b1j, massVBF800, deltaEtaVBF2
VBFm900eta2 = VBF1b1j, massVBF900, deltaEtaVBF2
VBFm1000eta2 = VBF1b1j, massVBF1000, deltaEtaVBF2

VBFm300eta2p5 = VBF1b1j, massVBF300, deltaEtaVBF2p5
VBFm350eta2p5 = VBF1b1j, massVBF350, deltaEtaVBF2p5
VBFm400eta2p5 = VBF1b1j, massVBF400, deltaEtaVBF2p5
VBFm450eta2p5 = VBF1b1j, massVBF450, deltaEtaVBF2p5
VBFm500eta2p5 = VBF1b1j, massVBF500, deltaEtaVBF2p5
VBFm550eta2p5 = VBF1b1j, massVBF550, deltaEtaVBF2p5
VBFm600eta2p5 = VBF1b1j, massVBF600, deltaEtaVBF2p5
VBFm650eta2p5 = VBF1b1j, massVBF650, deltaEtaVBF2p5
VBFm700eta2p5 = VBF1b1j, massVBF700, deltaEtaVBF2p5
VBFm750eta2p5 = VBF1b1j, massVBF750, deltaEtaVBF2p5
VBFm800eta2p5 = VBF1b1j, massVBF800, deltaEtaVBF2p5
VBFm900eta2p5 = VBF1b1j, massVBF900, deltaEtaVBF2p5
VBFm1000eta2p5 = VBF1b1j, massVBF1000, deltaEtaVBF2p5

VBFm300eta3 = VBF1b1j, massVBF300, deltaEtaVBF3
VBFm350eta3 = VBF1b1j, massVBF350, deltaEtaVBF3
VBFm400eta3 = VBF1b1j, massVBF400, deltaEtaVBF3
VBFm450eta3 = VBF1b1j, massVBF450, deltaEtaVBF3
VBFm500eta3 = VBF1b1j, massVBF500, deltaEtaVBF3
VBFm550eta3 = VBF1b1j, massVBF550, deltaEtaVBF3
VBFm600eta3 = VBF1b1j, massVBF600, deltaEtaVBF3
VBFm650eta3 = VBF1b1j, massVBF650, deltaEtaVBF3
VBFm700eta3 = VBF1b1j, massVBF700, deltaEtaVBF3
VBFm750eta3 = VBF1b1j, massVBF750, deltaEtaVBF3
VBFm800eta3 = VBF1b1j, massVBF800, deltaEtaVBF3
VBFm900eta3 = VBF1b1j, massVBF900, deltaEtaVBF3
VBFm1000eta3 = VBF1b1j, massVBF1000, deltaEtaVBF3



#####


nobtagMM     = bjet1_bID < 0.8484 && bjet2_bID < 0.8484
massCut      = bH_mass_raw > 80 && bH_mass_raw < 160 && tauH_SVFIT_mass > 80 && tauH_SVFIT_mass < 160
massCutCent  = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && bH_mass_raw > 74.5 && bH_mass_raw < 147.5
boostMassCut = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && fatjet_softdropMass > 90 && fatjet_softdropMass < 160
ellypsMassCut  = ((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.))/(35.*35.) + ((bH_mass_raw-111.)*(bH_mass_raw-111.))/(45.*45.) <  1.0
noZMassCut   = bH_mass_raw > 50 && bH_mass_raw < 200 && tauH_SVFIT_mass > 120 && tauH_SVFIT_mass < 160
circMassCut  = TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) <  40.0
MTcut        = mT1 < 30
resBDTCut    = BDTResonant > 0.4
nonresBDTCut = LepTauKine > -0.134



### to optimize the BDT WP, these are the cuts for the X% rejection efficiency on the ttbar, in the 2b0j resolved region
### three sets of cuts for the three BDT trained. NOTE: signal efficiencies associated can change depending on the signal!
nrBDTCut50rej = LepTauKine > -0.662135998321
nrBDTCut60rej = LepTauKine > -0.57565599854
nrBDTCut70rej = LepTauKine > -0.447063998866
nrBDTCut80rej = LepTauKine > -0.262071999335
nrBDTCut85rej = LepTauKine > -0.128215999675
nrBDTCut90rej = LepTauKine > 0.089111999774

lmrBDTCut50rej = BDTResonantLM > -0.5948
lmrBDTCut60rej = BDTResonantLM > -0.3548
lmrBDTCut70rej = BDTResonantLM > -0.0764
lmrBDTCut80rej = BDTResonantLM > 0.2404
lmrBDTCut85rej = BDTResonantLM > 0.3748
lmrBDTCut90rej = BDTResonantLM > 0.4772

hmrBDTCut50rej = BDTResonantHM > -0.9212
hmrBDTCut60rej = BDTResonantHM > -0.8644
hmrBDTCut70rej = BDTResonantHM > -0.7492
hmrBDTCut80rej = BDTResonantHM > -0.5148
hmrBDTCut85rej = BDTResonantHM > -0.2988
hmrBDTCut90rej = BDTResonantHM > 0.0188




SR           = isOS != 0 && dau1_iso < 0.1 && dau2_MVAiso >= 3

#X QCD
isoDau1_SR   = dau1_iso < 0.1
isoDau2_0    = dau2_MVAiso >=0 && dau2_MVAiso < 1
isoDau2_1     = dau2_MVAiso >=1 && dau2_MVAiso < 2
isoDau2_2      = dau2_MVAiso >=2 && dau2_MVAiso < 3
isoDau2_SR      = dau2_MVAiso >=3 && dau2_MVAiso < 6
isoDau2_QCD  	 = dau2_MVAiso >=0 && dau2_MVAiso < 3
isoDau2_QCDtight = dau2_MVAiso >=1 && dau2_MVAiso < 3
isoDau2_RLX  	  = dau2_MVAiso >=3 && dau2_MVAiso < 6

SS		     		       =  isOS == 0,isoDau1_SR
OSblind				       	       =  isOS !=0 && dau2_MVAiso <= 3, isoDau1_SR
SS_VBFbtagM				         = baselineVBF_btagM, isOS == 0
OSblind_VBFbtagM  = baselineVBF_btagM, isOS !=0 && dau2_MVAiso <= 3

SS_VBF		       		         = baselineVBF, isOS == 0
OSblind_VBF				   = baselineVBF, isOS !=0 && dau2_MVAiso <= 3
####



SStight      = isOS == 0 && dau1_iso < 0.1 && dau2_MVAiso >= 3
OSrlx        = isOS != 0 && dau1_iso < 0.1 && dau2_MVAiso >= 1
SSrlx        = isOS == 0 && dau1_iso < 0.1 && dau2_MVAiso >= 1
OSinviso     = isOS != 0 && dau1_iso < 0.1 && dau2_MVAiso >= 1 && dau2_MVAiso < 3
SSinviso     = isOS == 0 && dau1_iso < 0.1 && dau2_MVAiso >= 1 && dau2_MVAiso < 3

SRforEff      = SR, genDecMode1 == 1

# resolved     = baseline, btagMM, massCut, isBoosted != 1
# dummySel     = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20
# dummySel2    = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20 && bjet1_pt > 30
# SR           = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdOStight   = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdOSrlx     = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdSStight   = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdSSrlx     = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 

# defaultNoIso               = baseline
# defaultBtagLLNoIso         = baseline, btagLL      
# defaultBtagLLNoIsoBBTTCut  = baseline, btagLL, massCutCent, HH_mass_raw > 200
# defaultBtagLLNoIsoBBTTCutCirc  = baseline, btagLL, circMassCut, HH_mass_raw > 200

s1b1j        = baseline , btagM
s2b0j        = baseline , btagMM
s0b2j        = baseline , nobtagMM

#s1b1jresolved = baseline , btagM, isBoosted != 1
#s2b0jresolved = baseline , btagMM, isBoosted != 1
#sboostedLL    = baseline , btagLL, isBoosted == 1
#sboostedMM    = baseline , btagMM, isBoosted == 1

s1b1jresolvedMcut = baseline , btagM, isBoosted != 1 , ellypsMassCut
s2b0jresolvedMcut = baseline , btagMM, isBoosted != 1 , ellypsMassCut

s1b1jresolvedMcutBDT = baseline , btagM, isBoosted != 1 , ellypsMassCut, nonresBDTCut
s2b0jresolvedMcutBDT = baseline , btagMM, isBoosted != 1 , ellypsMassCut, nonresBDTCut
sboostedLLMcut       = baseline , btagLL, isBoosted == 1 , boostMassCut
sboostedMMMcut       = baseline , btagMM, isBoosted == 1 , boostMassCut

s1b1jMcut    = baseline , btagM , ellypsMassCut
s2b0jMcut    = baseline , btagMM , ellypsMassCut
s1b1jMcutBDT = baseline , btagM , ellypsMassCut, nonresBDTCut
s2b0jMcutBDT = baseline , btagMM , ellypsMassCut, nonresBDTCut

s1b1jresolvedMcutnr90  = s1b1jresolvedMcut, nrBDTCut90rej
s1b1jresolvedMcutlmr90 = s1b1jresolvedMcut, lmrBDTCut90rej
s1b1jresolvedMcuthmr90 = s1b1jresolvedMcut, hmrBDTCut90rej

s2b0jresolvedMcutnr90  = s2b0jresolvedMcut, nrBDTCut90rej
s2b0jresolvedMcutlmr90 = s2b0jresolvedMcut, lmrBDTCut90rej
s2b0jresolvedMcuthmr90 = s2b0jresolvedMcut, hmrBDTCut90rej

s1b1jresolvedMcutlmr70 = s1b1jresolvedMcut, lmrBDTCut70rej
s2b0jresolvedMcutlmr70 = s2b0jresolvedMcut, lmrBDTCut70rej

s1b1jresolvedMcutLepTauKine = s1b1jresolvedMcut, nonresBDTCut
s2b0jresolvedMcutLepTauKine = s2b0jresolvedMcut, nonresBDTCut


s0b2jMt              = s0b2j,mT2 < 30

s0b2jMcut              = s0b2j,     ellypsMassCut
s0b2jresolvedMcut      = s0b2jMcut, isBoosted != 1
s0b2jresolvedMcutMtcut = s0b2jresolvedMcut, mT1 < 30

s0b2jMcutNoZ120              = s0b2j,     ellypsMassCut, tauH_SVFIT_mass > 120
s0b2jresolvedMcutNoZ120      = s0b2jMcutNoZ120, isBoosted != 1
s0b2jresolvedMcutMtcutNoZ120 = s0b2jresolvedMcutNoZ120, mT1 < 30

s0b2jMcutNoZ130              = s0b2j,     ellypsMassCut, tauH_SVFIT_mass > 130
s0b2jresolvedMcutNoZ130      = s0b2jMcutNoZ130, isBoosted != 1
s0b2jresolvedMcutMtcutNoZ130 = s0b2jresolvedMcutNoZ130, mT1 < 30

s0b2jMcutNoZMCut              = s0b2j, noZMassCut
s0b2jresolvedMcutNoZMCut      = s0b2jMcutNoZMCut, isBoosted != 1
s0b2jresolvedMcutMtcutNoZMCut = s0b2jresolvedMcutNoZMCut, mT1 < 30


sboostedLL_noVBFm300eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm350eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm400eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm450eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm500eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm550eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm600eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm650eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm700eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm750eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm800eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm900eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
sboostedLL_noVBFm1000eta2=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)

sboostedLL_noVBFm300eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm350eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm400eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm450eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm500eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm550eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm600eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm650eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm700eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm750eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm800eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm900eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
sboostedLL_noVBFm1000eta2p5=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)



sboostedLL_noVBFm300eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm350eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm400eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm450eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm500eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm550eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm600eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm650eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm700eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm750eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm800eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm900eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
sboostedLL_noVBFm1000eta3=sboostedLLMcut, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)

s1b1jresolvedMcut_noVBFm300eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm350eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm400eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm450eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm500eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm550eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm600eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm650eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm700eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm750eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm800eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm900eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm1000eta2=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)


s1b1jresolvedMcut_noVBFm300eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm350eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm400eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm450eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm500eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm550eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm600eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm650eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm700eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm750eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm800eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm900eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm1000eta2p5=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)

s1b1jresolvedMcut_noVBFm300eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm350eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm400eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm450eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm500eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm550eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm600eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm650eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm700eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm750eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm800eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm900eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s1b1jresolvedMcut_noVBFm1000eta3=s1b1jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)

s2b0jresolvedMcut_noVBFm300eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm350eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm400eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm450eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm500eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm550eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm600eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm650eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm700eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm750eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm800eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm900eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm1000eta2=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>2.0 && bjet1_bID > 0.8484)


s2b0jresolvedMcut_noVBFm300eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm350eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm400eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm450eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm500eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm550eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm600eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm650eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm700eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm750eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm800eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm900eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm1000eta2p5=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>2.5 && bjet1_bID > 0.8484)


s2b0jresolvedMcut_noVBFm300eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 300 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm350eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 350 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm400eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 400 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm450eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 450 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm500eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 500 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm550eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 550 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm600eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 600 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm650eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 650 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm700eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 700 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm750eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 750 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm800eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 800 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm900eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 900 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)
s2b0jresolvedMcut_noVBFm1000eta3=s2b0jresolvedMcutlmr70, !((VBFjet1_pt > 30 && VBFjet2_pt > 30) && VBFjj_mass > 1000 && VBFjj_deltaEta>3 && bjet1_bID > 0.8484)


#########################################################################
#########################################################################

## weights to be applied for a certain selections when calling Fill()
## multiple weights are passed as list and are multiplied together
## NOTE: no weight is applied for data (the simple Fill() is used)
[selectionWeights]
baseline = MC_weight, IdAndIsoSF, trigSF, PUReweight
btagLL = bTagweightL, DYscale_LL
btagMM = bTagweightM, DYscale_MM
nobtagMM = bTagweightM, DYscale_MM
btagL = bTagweightL, DYscale_LL ## fixme: should DY scale be rederived for single tag?
btagM = bTagweightM, DYscale_MM ## fixme: should DY scale be rederived for single tag?

#########################################################################
#########################################################################

[sampleWeights]
TTfullyHad = TTtopPtreweight
TTfullyLep = TTtopPtreweight
TTsemiLep  = TTtopPtreweight

#########################################################################
#########################################################################


# define alternative weights to be tested instead of the nominal one
[systematics]
TTtopPtreweight  = topUp:TTtopPtreweight_up , topDown:TTtopPtreweight_down
# trigSF         = trigUP:trigSF_up , trigDOWN:trigSF_down
# turnOnreweight = rewUP:turnOnreweight_tauup, rewDO:turnOnreweight_taudown

#########################################################################
#########################################################################

# ROOT-like definition of the binning
[histos]
HH_deltaR        = 20, 0, 5
tauH_pt           = 25, 10, 510
bH_pt             = 25, 10, 510
HH_mass        = 25, 0, 1000
HH_pt             = 25, 0, 500
top_Wmass_bclose_mass = 25,50,550
top_Wjj_bclose_mass = 25,50,550
top_Wjj_b_mass = 25,0,500
VBFjj_mass_log = 30, 0, 50
jj_mass_log = 30, 0, 50
bjets_bID = 40,-1,3.0
bjet1_bID         = 20, -0.5, 1.5
bjet2_bID         = 20, -0.5, 1.5
HH_deltaPhi       = 15, 0., 3.14159
ditau_deltaPhi    = 15, 0., 3.14159
dib_deltaPhi      = 15, 0., 3.14159
dau1_pt           = 40, 45, 405
dau1_eta          = 25, -2.5, 2.5
dau1_phi          = 25, -3.14159, 3.14159
dau2_pt           = 80, 45, 405
dau2_eta          = 25, -2.5, 2.5
dau2_phi          = 25, -3.14159, 3.14159
bjet1_pt          = 50, 0, 500
bjet2_pt          = 50, 0, 500
bjet1_eta         = 30, -3.0, 3.0
bjet2_eta         = 30, -3.0, 3.0
bjet1_phi         = 25, -3.14159, 3.14159
bjet2_phi         = 25, -3.14159, 3.14159
met_et            = 60, 0, 600
met_phi           = 25, -3.14159, 3.14159
bH_mass           = 25, 10, 510
tauH_mass         = 25, 10, 510
njets             = 20,-0.5,19.5
ditau_deltaR       = 25, 0, 5
dib_deltaR         = 25, 0, 5
mT2                   = 20, 0, 200.
VBFjj_mass	      = 25, 0,2000
VBFjj_deltaEta	      = 20, 0, 10
VBFjj_HT	      = 50,0,1000
VBFjet1_pt	      = 25,0,200
VBFjet1_eta	      = 20, -5., 5.
VBFjet2_pt	      = 25,0,200
VBFjet2_eta	      =	20, -5., 5.
jj_mass		     = 25, 0,2000
jj_deltaEta	     = 20, 0, 10
jj_HT		     = 50, 0,1000
VBFjet2_btag	     = 20, -0.5, 1.5
VBFjet1_btag	     = 20, -0.5, 1.5
dau1_z		     = 20,-2,2
dau2_z		     = 20,-2,2
bjet1_z		     = 20,-2,2
bjet2_z		     = 20,-2,2
tauH_z		     = 20,-2,2
HH_z		     = 20,-2,2
HH_zV		     = 20,-10,4
HH_A		     = 20,0,10
jet5_z		     = 20, -2, 2
jet5_pt		     = 25, 0, 250
jet5_eta	     = 20, -5, 5
jet5_VBF_z		     = 20, -2, 2
jet5_VBF_pt		     = 25, 0, 250
jet5_VBF_eta	     = 20, -5, 5
dau1_iso 	     = 60, -0.8, 1.
dau2_iso 	     = 60, -0.8, 1.
dau1_MVAiso 	     = 6, 0, 6
dau2_MVAiso 	     = 6, 0, 6
met_et_corr          = 60, 0, 600
jet3_z		     = 20, -2, 2
jet3_pt		     = 25, 0, 500
jet3_eta	     = 20, -5, 5
jet4_z		     = 20, -2, 2
jet4_pt		     = 25, 0, 500
jet4_eta	     = 20, -5, 5
top_Wc_bclose_mass = 25,50,550
top_Wc_bcentral_mass= 25,50,550
top_Wc_bforward_mass= 25,50,550
top_Wf_bclose_mass = 25,50,550
top_Wf_bcentral_mass= 25,50,550
top_Wf_bforward_mass= 25,50,550
ditau_deltaEta     = 20,0,10
dib_deltaEta       = 20,0,10
HH_deltaEta        = 20,0,10
addjets  = 10,0,10

#########################################################################
#########################################################################

# user defined binning for a variable - has precedence on [histos]
[binning]
#HH_mass             = 200, 250, 300, 350, 450, 600, 1000
#HH_mass_raw         = 200, 250, 300, 350, 450, 600, 1000
#HH_mass_raw_tauup   = 200, 250, 300, 350, 450, 600, 1000
#HH_mass_raw_taudown = 200, 250, 300, 350, 450, 600, 1000
#HHKin_mass          = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000, 1600
# HHKin_mass_raw      = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000, 1600

#HHKin_mass_raw          = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 700, 850, 1000
#HHKin_mass_raw_tauup    = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 700, 850, 1000 
#HHKin_mass_raw_taudown  = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 700, 850, 1000
#HHKin_mass_raw_jetup    = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 700, 850, 1000 
#HHKin_mass_raw_jetdown  = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 700, 850, 1000

# bH_mass             = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# bH_mass_raw         = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
#fatjet_softdropMass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# tauH_SVFIT_mass     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# MT2                 = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500, 600
MT2                 = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 500
MT2_tauup           = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 500 
MT2_taudown         = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 500
MT2_jetup           = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 500
MT2_jetdown         = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 500

#########################################################################
#########################################################################

[histos2D]
tauH_SVFIT_mass:bH_mass_raw = 100, 0, 500, 100, 0, 500
tauH_SVFIT_mass:dau1_pt     = 100, 0, 500, 100, 0, 500
genDecMode1:genDecMode2     = 10, -2, 8, 10, -2, 8

# user defined binning for a variable - will override the definition in [histos2D]
# NOTE: if both x and y binnings are defined, there is no need to insert a binning in [histos2D]
# note: to specify an user binning for a certain axis of a 2D plot, e.g. a binning for B in A:B, use '@' :
# A:B@B = 0, 15, 20, 30, 50, 1000
[binning2D]
# tauH_SVFIT_mass:bH_mass_raw@bH_mass_raw     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# tauH_SVFIT_mass:bH_mass_raw@tauH_SVfit_mass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500